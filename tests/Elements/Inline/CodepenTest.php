<?php

declare(strict_types=1);

namespace JohnnyHuy\Laravel\Markdown\Tests\Elements\Inline;

use Mockery;
use League\CommonMark\DocParser;
use League\CommonMark\Environment;
use League\CommonMark\HtmlRenderer;
use JohnnyHuy\Laravel\Inline\Element\Codepen;
use PHPUnit\Framework\ExpectationFailedException;
use JohnnyHuy\Laravel\Inline\Parser\CodepenParser;
use JohnnyHuy\Laravel\Markdown\Tests\BaseTestCase;
use JohnnyHuy\Laravel\Inline\Renderer\CodepenRenderer;
use League\CommonMark\Inline\Renderer\InlineRendererInterface;
use SebastianBergmann\RecursionContext\InvalidArgumentException;

/**
 * CommonMak markdown extension test
 *
 * @author Johnny Huynh <info@johnnyhuy.com>
 */
class CodepenTest extends BaseTestCase
{
    public function successfulStrings()
    {
        $expected = '<p><div class="codepen-container"><iframe id="cp_embed_XyOaBj" src="https://codepen.io/YusukeNakaya/embed/preview/XyOaBj?height=300&amp;slug-hash=XyOaBj&amp;default-tabs=css,result&amp;host=https://codepen.io" title="Only CSS: Shooting Star" scrolling="no" frameborder="0" height="300" allowtransparency="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></div></p>';

        return [
            [':codepen https://codepen.io/YusukeNakaya/pen/XyOaBj', $expected]
        ];
    }

    public function failedStrings()
    {
        return [
            // gist keyword is not separated with a space
            [':codepenhttps://codepen.io/YusukeNakaya/pen/XyOaBj', '<p>:codepenhttps://codepen.io/YusukeNakaya/pen/XyOaBj</p>'],

            // Didn't include the ':gist' keyword
            ['https://codepen.io/YusukeNakaya/pen/XyOaBj', '<p>https://codepen.io/YusukeNakaya/pen/XyOaBj</p>'],

            // Invalid codepen URLs
            [':codepen https//gist.github.com/noxify/2b02fd0fb0ea18a4d9d764e31fe9af8e', '<p>:codepen https//gist.github.com/noxify/2b02fd0fb0ea18a4d9d764e31fe9af8e</p>']
        ];
    }

    /**
     * @dataProvider successfulStrings
     * @param $input
     * @param $output
     * @throws ExpectationFailedException
     * @throws InvalidArgumentException
     */
    public function testShouldRender($input, $output)
    {
        // Arrange
        $rendererMock = Mockery::mock(CodepenRenderer::class)
            ->makePartial()
            ->shouldReceive('getContent')
            ->withAnyArgs()
            ->once()
            ->andReturn(file_get_contents(__DIR__ . '/../../Fakes/CodePen.json'));
        $environment = Environment::createCommonMarkEnvironment();
        $parser = new DocParser($environment);
        $htmlRenderer = new HtmlRenderer($environment);
        $environment->addInlineParser(new CodepenParser());
        $environment->addInlineRenderer(Codepen::class, $rendererMock->getMock());

        // Act
        $html = $htmlRenderer->renderBlock($parser->parse($input));

        // Arrange
        $this->assertSame("$output\n", $html);
    }

    /**
     * @dataProvider failedStrings
     * @param $input
     * @param $output
     * @throws ExpectationFailedException
     * @throws InvalidArgumentException
     */
    public function testShouldNotRender($input, $output)
    {
        $environment = Environment::createCommonMarkEnvironment();
        $parser = new DocParser($environment);
        $htmlRenderer = new HtmlRenderer($environment);
        $environment->addInlineParser(new CodepenParser());
        $environment->addInlineRenderer(Codepen::class, new CodepenRenderer());

        // Act
        $html = $htmlRenderer->renderBlock($parser->parse($input));

        // Assert
        $this->assertSame("$output\n", $html);
    }
}